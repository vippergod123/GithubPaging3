apply plugin: 'jacoco'

jacoco { toolVersion = "0.8.5" }

private static boolean isAndroidModule(Project project) {
    boolean isAndroidLib = project.plugins.hasPlugin("com.android.library")
    boolean isAndroidApp = project.plugins.hasPlugin("com.android.application")
    return isAndroidLib || isAndroidApp
}

tasks.withType(Test) { jacoco.includeNoLocationClasses = true }

afterEvaluate { project ->
    if (isAndroidModule(project)) {
        setupAndroidReporting()
    } else {
        setupKotlinReporting()
    }
}

def setupKotlinReporting() {
    jacocoTestReport {
        dependsOn test
        reports {
            csv.enabled false
            xml.enabled false
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
    }
}

def setupAndroidReporting() {
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses true
    }
    task jacocoTestReport(type: JacocoReport, dependsOn:['testDebugUnitTest']) {
        reports {
            csv.enabled false
            xml.enabled false
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }

            def fileFilter = [
                    '**/*App.*',
                    '**/*Application.*',
                    '**/*Activity.*',
                    '**/*Fragment.*',
                    '**/JsonAdapter.*'
            ]
            def debugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
            def mainSrc = "$projectDir/src/main/java"
            sourceDirectories.from = files([mainSrc])
            classDirectories.from = files([debugTree])
            executionData.from = fileTree(dir: project.buildDir,
                    includes: [
                            'jacoco/testDebugUnitTest.exec',
                            'outputs/code-coverage/connected/*coverage.ec'
                    ])
        }
    }
}